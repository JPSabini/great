
# coding: utf-8

# NetworkX Documentation:
# https://networkx.github.io/documentation/latest/reference/linalg.html

# ## Overview
# 1. Areas of social networks?
# 1. How networks are stored
# 2. Creating a network: undirected, directed, weighted networks
# 3. Saving a network graph
# 4. Visualizing a graph
# 5. Loading networks from csv files, example
# 6. Network characteristics: node vs network
# 7. Twitter example

# ## Areas of Social Network 
# 
# 
# 
# #### 1. Graph theory: Theoretical, equilbrium graph structures and interactions (Academic)
# 
# Game theory on networks
# - http://econ.duke.edu/people/kranton
# - http://www.markusmobius.org/publications
# - http://www.columbia.edu/~at2761/Research.html
# 
# 
# If information is spread in a network what will be the equilibrium belief?
# - http://www.cs.columbia.edu/~augustin/publications.html
# - http://web.stanford.edu/~jacksonm/papersarticles.html
# 
# 
# #### 2. Social network analysis: Studies the data visually, and the network structure (not so much inference based) (CS, startups)
# - http://www.ladamic.com/
# - http://research.microsoft.com/en-us/people/duncan/
# - http://shop.oreilly.com/product/0636920020424.do
# 
# 
# #### 3. Empirical analysis: A/B testing on networks (node, or subgraphs)(Facebook, Microsoft) most empirical analysis
# 
# - http://eytan.github.io/
# - http://web.mit.edu/sinana/www/
# - http://arxiv.org/pdf/1201.4145.pdf
# - http://research.microsoft.com/en-us/people/duncan/
# 
# We'll be in Category 2.
# 

# ## Building Networks: Undirected, Directed

# In[30]:

import networkx as nx
#for matrices, generally not needed
import numpy as np
#for plotting graphs
import matplotlib.pyplot as plt
#or pylab for plotting
import pylab
import pandas as pd
#if you want to see the graphs in line
get_ipython().magic(u'matplotlib inline')


# In[31]:

#Networks are stored as adjancey matrices (m by n, or row by column)
#We'll go through the concepts of how to represent networks in matrices, but hold tight, 
#Because this is not how networkx stores network data
#A basic matrix structures look like this, where 12 is the relationship from node 1 to node 2 and)
a = np.matrix('11 12 13; 21 22 23; 31 32 33')
a


# In[32]:

#Undirected Graphs
#Suppose the following connections exist between nodes: 1,2; 3,1
#Then the matrix will look like this to represent the network
b = np.matrix('0 1 1; 1 0 0; 1 0 0')
b


# In[33]:

#Directed Graphs
#Now suppose the connections are directed so that the network represents phone calls
#Now 1,2 means Person 1 calls person 2, but not the reverse
c = np.matrix('0 1 0; 0 0 0;1 0 0')
c


# In[34]:

#Weighted Graphs
#Now suppose the connections are weighted so that the network represents the # phone calls
#Now 1,2 means Person 1 calls person 2, 5 times in a week, and person 3 calls person 1, 2 times a week.
d = np.matrix('0 5 0; 0 0 0; 2 0 0')
d


# But networkx doesn't store matrices like this at all. Networkx stores matrices as dictionaries. The bread and better to networkx is adding in nodes, edges (directed or undirected) between nodes, and then attributes, and weights to those nodes.Let's start to build an undirected graph and look at how it's stored. 

# In[35]:

#Functions in networkx are divided between building a graph and metrics about the graph
#The building functions in networkx are derivative of adding nodes or edges (Node;Nodes_from;Edge;Edges_From )

#Create the undirected graph
G=nx.Graph()


# In[36]:

#Add first node in
G.add_node(1)
H=nx.path_graph(2)
G.add_nodes_from(H)


# In[37]:

plt.show(nx.draw(G,with_labels=True))


# In[38]:

#Add multiple nodes using function "add_nodes_from" and then a list
G.add_nodes_from([1,2,3])


# In[39]:

plt.show(nx.draw(G,with_labels=True))


# In[40]:

#Add Edges
e=[(0,3), (3,2), (2,1), (1,3)]
G.add_edges_from(e)


# In[41]:

#Structure of storage
G.edges()


# In[42]:

plt.show(nx.draw(G,with_labels=True))


# In[43]:

#So the adjancey matrix is a list of dictionaries
for n,x in G.adjacency_iter():
    print n, x
    #for value in x.values():
    #    print value


# In[44]:

#So we can walk into the edges and their attributes like we would a dictionary
G[0] # is the first node


# In[45]:

G[0][3] #is the one/two edge


# In[46]:

#Side Note: There's some inconsistency in networkx
#Sometimes a function that operates on graph is a method on the graph (object oriented)

#And sometimes it's a standalone function that's built into the package (procedural)
nx.shortest_path(G,0,2) 


# Networkx provides some nice reasoning behind this design
# http://networkx.github.io/documentation/networkx-1.9.1/overview.html

# In[47]:

#Add attributes (different from weights)
people = {0:"Kate",1:"Bob",2:"Terry",3:"Joe"}
#Relabel the graph G with this info
G=nx.relabel_nodes(G,people)
plt.show(nx.draw(G,with_labels=True))


# In[48]:

G.node['Joe']=25


# In[49]:

G['Joe']['Bob']['distance']=5 #is the one/two edge


# In[50]:

print G.edges(data=True)
print G.nodes(data=True)


# In[51]:

#Graph attribute        
G.graph['Group']='Group A'
plt.show(nx.draw(G, with_labels=True))
G.graph


# In[52]:

#Edge attribute
G.add_edge('Joe', 'Bob', calls=4.7 )
G.add_edges_from([('Joe','Terry'),('Bob','Joe')], distance=5)
G.edges(data=True)


# In[55]:

#A number of ways to add attributes
#Dictionary key/value pairs added in wiht add_edges_from
G['Joe']['Kate']['weight'] = 4.7
G.edges(data=True)


# In[58]:

#It's easier to add in the attributes from the beginning in a dictionary
H=nx.path_graph(10)
H.add_edges_from([(1,2,{'color':'blue','weight':10 }), (2,3,{'weight':8})])
plt.show(nx.draw(H,with_labels=True))


# In[60]:

graph=nx.draw(G, with_labels=True)
plt.show(graph)


# ### Saving your work

# In[ ]:

#Saving the graph
#http://networkx.lanl.gov/reference/readwrite.html
nx.write_gml(H, "test.gml")
nx.write_gexf(K, "test.gexf")
nx.write_gpickle(G,"test.gpickle")

plt.savefig('graph.png')


# ### Directed Graphs

# In[71]:

#Directed Graph
#Bob called Mary and Mary never called Bob back?

#You can direct the direction of the tie
#Important for propogation and spread of information
# Granovetter (1974) "The Strength of Weak Ties"

DG=nx.DiGraph()
DG.add_weighted_edges_from([(0,3,.2),(3,0,5), (3,2,6), (2,1,.1), (1,3,.7)])
DG.out_degree(1,weight='weight')
plt.show(nx.draw(DG, with_labels=True))
DG.edges(data=True)
#Networkx doesn't produce the prettiest directed graphs


# In[ ]:

DG.edges(data=True)


# ### Multi directed graphs

# In[65]:

#What if want multiple edges between indiviudals?
#A multiedge graph is good for this. You can add the edge in twice. 
MG=nx.MultiDiGraph()
MG.add_weighted_edges_from([(0,3,0),(0,3,22), (3,2,6), (2,1,.1), (1,3,.7)])
plt.show(nx.draw(MG,with_labels=True))
MG.edges(data=True)


# ### Built in functions to build graphs

# #### Deterministic graphs

# In[72]:

#networkx has plenty of built in graphs
plt.show(nx.draw(nx.barbell_graph(10,10)))


# In[73]:

plt.show(nx.draw(nx.lollipop_graph(10,10)))


# In[74]:

plt.show(nx.draw(nx.complete_graph(10)))


# #### Stochastic graphs

# In[77]:

#erdos-renyi graph with 10 nodes, and edge connection probability .6
#Often used as a comparative graph
#p=.01, 1 (complete), .5 gives you a range of possible graphs
plt.show(nx.draw(nx.gnp_random_graph(10,.01)))


# In[78]:

#small world graph (courses: Lada Adamic, Matt Jackson)
help(nx.watts_strogatz_graph)


# ### An imporatant Aside: loading graph from CSV

# In[79]:

#Loading from a csv, you can import it as a list of edges, a dictionary, or into a numpy array
a=np.genfromtxt("guess.csv",delimiter=',',skiprows=0)


# In[80]:

#Convert to networkx graph
a=np.array(a)
a[a <0] = 0
a[a !=0] = 1
G = nx.Graph(a)
plt.show(nx.draw(G))


# In[81]:

#You Can throw that into a function
fname="guess.csv"
def csv_to_networkx(fname):
        a=np.genfromtxt(fname,delimiter=',',skiprows=0)
        a=np.array(a)
        #replace matrix with 0 if =-99
        a[a <0] = 0
        #replace matrix with 1 if not equal 0
        a[a !=0] = 1
        #convert to network matrix
        G = nx.Graph(a)
        plt.show(nx.draw(G))
        return G


# In[82]:

G=csv_to_networkx('guess.csv')


# ## Visualization

# In[83]:

#Let's use a ready made graph for the next steps
#Social network of friendships between 34 members of a karate club at a US university in the 1970s
kn=nx.read_gml('karate.gml')
plt.show(nx.draw(kn,with_labels=True))
kn.number_of_nodes()
kn.number_of_edges()


# Lots of ready made networks
# http://www-personal.umich.edu/~mejn/netdata/

                #There's more than one way to visualize a graph
#The networkx default is a force-directed graph

The full list (Adamic, Chapter 4): 
    Force-directed layout: layout is dynamic and determined by the connections between the nodes
    Random layout: nodes are placed randomly
    Circular layout: circular layouts place all the nodes in a circle and then add edges between them
    Grid layout: nodes are in a grid
    Yifan Hu layout
    Harel-Koren fast multiscale layout: force-directed layout algorithms but uses optimizations in the 
        underlying code to make the algorithm computationally efficient
        
See: http://networkx.lanl.gov/reference/drawing.html#module-networkx.drawing.nx_pydot

                
# In[ ]:

#Exercise: Lets plot a graph using EC as a weight in a spring layout


# In[ ]:

plt.show(nx.circular_layout(kn)) #Position nodes on a circle


# In[ ]:

plt.show(nx.random_layout(kn)) #Position nodes uniformly at random in the unit square.


# ## Network Metrics
# ### Node specific measures

# In[ ]:

degree=nx.degree_centrality(kn) #a node with few influential contacts can matter more than the guy who knows everyone
betweeness=nx.betweenness_centrality(kn)
closeness=nx.closeness_centrality(kn)
eigenvector=nx.eigenvector_centrality(kn)

c=nx.closeness_centrality(kn)
for v in kn.nodes():
    print("%0.2d %5.3f"%(v,c[v]))


# In[ ]:

type(closeness)


# In[ ]:

#export it to a dataframe
import pandas as pd
df = pd.DataFrame(closeness.items())
df


# In[ ]:

#export it to a list
idlist= []
eglist = []
for key, value in eg.iteritems():
    eglist.append(value)
    idlist.append(key)
    
#test={'eg':eglist,'id':idlist}
#idlist


# ### Graph specific measures

# In[91]:

#Centralizaiton=if centrality is more evenly distributed, then the centralization of the network is low
connected=nx.number_connected_components(kn)
#x=[len(i) for i in nx.connected_component_subgraphs(kn)]

#Density=compares the number of edges that exist in a network to the number of edges that could possibly exist
nx.density(kn)

#Degree distribution=how many nodes have each possible degree
in_degrees=nx.degree_centrality(kn)
in_values = sorted(set(in_degrees.values()))
in_hist = [in_degrees.values().count(x) for x in in_values]

plt.hist(in_hist)
#plt.figure(in_hist)
plt.xlabel('Degree')
plt.ylabel('Number of nodes')
plt.title('Network')
 


# In[ ]:

#Example: finding Strong Ties (an example from "Working with Social Graphs")


# In[ ]:


"""
Created on Sun Sep 29 22:13:18 2013

@author: kathrynvasilaky
"""
from twitter import TwitterStream, OAuth
from pprint import pprint
import networkx as net
import csv #needed for reading/writing csv files
import sys #not really sure if this is needed or not
import json #needed for handling JSON although not intuitive
import datetime #this allows us to use the current date as a timestampt
import os
import networkx as net
import json
import pylab


#enter your keys inside the quotes
consumer_key = ""
consumer_secret = ""
access_token = "-"
access_token_secret = ""
    
os.chdir('/Users/kathrynvasilaky/SkyDrive/Statscom/twitter_SNA')
path="/Users/kathrynvasilaky/SkyDrive/Statscom/twitter_SNA"

twitter_stream = TwitterStream(auth=OAuth(token=access_token, token_secret=access_token_secret, consumer_key=consumer_key, consumer_secret=consumer_secret))

#Comma separated list of words to track
keywords = 'kittens, economics'
people=[123,124,125]

tweets = twitter_stream.statuses.filter(track=keywords)
retweets=net.DiGraph()
c = 1
print "Stream Initiated..."
while c < 10:   # Change this number to collect more tweets
    tweet = tweets.next()  #get next tweet from stream
    #print x
    author=tweet['user']['screen_name']
    print author  
    entities=tweet['entities']
    mentions=entities['user_mentions']
 
    for rt in mentions:
        alter=rt['screen_name']
        print alter
        retweets.add_edge(author,alter)
    c += 1

net.draw(retweets)
pylab.show(retweets)


                Some asides: 
[] can indicate a list, or athey can indicate how you index into a list, or they can indicate a key in a dictionary
() can indicated a tuple, but can also indicate the parameters you pass into a function
{} indicate a dictionary

ipython
esc outside of the cell, scrool up/down with j/k, dd deletes cell

What are the differences between?:
iterkeys() #gives the keys of the dictionary
iteritems() #returns all items in dictionary, one by one
items() #returns all items of dictionary at once (imagine the librian carrying all books on cats back. Neither of you could hold all of them)

                
# Some tutorials: 
# 
# https://www.udacity.com/wiki/creating-network-graphs-with-python
# 
# http://snap.stanford.edu/snappy/
# 
# http://www.python-course.eu/networkx.php
# 
# http://networkx.lanl.gov/networkx_tutorial.pdf
# 
# http://www-rohan.sdsu.edu/~gawron/python_for_ss/course_core/book_draft/Social_Networks/Networkx.html
# 
# http://networkx.github.io/documentation/networkx-1.9.1/tutorial/tutorial.html
# 
# http://www.cl.cam.ac.uk/~cm542/teaching/2010/stna-pdfs/stna-lecture8.pdf
# 
# https://www.packtpub.com/big-data-and-business-intelligence/practical-data-science-cookbook
# 
# Courses:
# 
# https://www.coursera.org/course/networksonline
# 
# https://www.coursera.org/course/sna
# 
# http://files.asimihsan.com/courses/social-network-analysis-2012/notes/social_network_analysis.html
# 

# In[ ]:

#Divide up the graph
#first one is the index, the second element is the content of each element
#how can we know that in advance?
for n,x in FX.adjacency_iter():
    print n,x
    #for each element of the dictionary, step in and get the value and weight
    for y,z in x.items():
        print y,z
        #captute the weight, which is the 2nd element
        data=z['weight']
        #print the weight
        print data
        if data<0.5: print('(%d, %d, %.3f)' % (n,y,data))

